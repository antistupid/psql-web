{% extends 'layout.twig' %}

{% block content %}
    <div style="height: 100%;" data-bind="init: init">
        <div id="content" class="container-fluid" data-bind="foreach: resultBlock">
            <div class="command"
                 data-bind="css: {pending: status() === 0, success: status() === 1, failure: status() === 2}">
                <div class="pull-right" data-bind="if: canRefresh()">
                    <a href="#" data-bind="click: $root.refresh"><i class="fa fa-refresh"></i></a>
                </div>
                <span data-bind="text: '#' + sequence"></span>
                <pre data-bind="text: command, click: $root.edit"></pre>
            </div>
            <div class="result pending" data-bind="attr: {id: 'result_' + sequence}, style: {height: height}">
                Pending...
            </div>
        </div>

        <div class="form-group" id="commandline" data-bind="commander: { triggerExecute: triggerExecute }">
            <div class="pull-right" id="btn_send"><a href="#">execute (Ctrl + Enter)</a></div>
            <span id="dsn">current dsn: postgresql://{{ username }}@{{ host }}/<span
                        data-bind="text: dbname">{{ dbname }}</span></span>
            <textarea class="form-control"></textarea>
        </div>
    </div>
{% endblock %}

{% block script %}
    {{ parent() }}
    <script type="text/javascript">
        var app = (function ($) {
            var CREATE = 1, EDIT = 2;

            var generateTable = function (keys, list) {
                var t = [];
                t.push('<table class="table table-striped"><thead><tr>');
                for (var i = 0; i < keys.length; i++) {
                    t.push('<th>' + keys[i] + '</th>')
                }
                t.push('</tr></thead><tbody>');
                for (var j = 0; j < list.length; j++) {
                    t.push('<tr>');
                    for (var k = 0; k < list[j].length; k++)
                        t.push('<td>' + list[j][k] + '</td>');
                    t.push('</tr>')
                }
                t.push('</tr></tbody></table>');
                return t.join('');
            };

            var scrollDown = function () {
                $content = $('#content');
                $content.scrollTop($content[0].scrollHeight);
            };

            var success = function (data, sequence, mode) {
                var $command = $('#command_' + sequence);
                var $result = $('#result_' + sequence);

                if (typeof data === 'string') { /* string */
                    $result.html('<pre>' + data + '</pre>').removeClass('pending');
                } else { /* table object */
                    $result.html(generateTable(data.keys, data.values)).removeClass('pending');
                    $('table', $result).DataTable({
                        scrollX: true,
                        paging: true
                    });
                }
                if (mode === CREATE)
                    scrollDown();
            };

            var error = function (data, sequence, mode) {
                var $result = $('#result_' + sequence);
                $result.html('<pre class="error">' + data + '</pre>').removeClass('pending');
                if (mode === CREATE)
                    scrollDown();
            };

            var getHeight = function (_sequence) {
                return $('#result_' + _sequence).height();
            };

            return {
                scrollDown: scrollDown,
                success: success,
                error: error,
                getHeight: getHeight,
                CREATE: CREATE,
                EDIT: EDIT
            };
        })(jQuery);

        (function () {
            ko.bindingHandlers.commander = {
                init: function (elem, va) {
                    var v = va();
                    (function ($) {

                        var sendInput = function () {
                            var $commandInput = $('textarea');
                            var command = $commandInput.val().trim();
                            if (command === '')
                                return false;
                            $commandInput.val('');

                            v.triggerExecute(command);
                            app.scrollDown();
                        };

                        $(elem).find('textarea').on('keydown', function (e) {
                            if (e.keyCode === 13 && e.ctrlKey) {
                                sendInput();
                                return false;
                            }
                            return true;
                        });

                        $(elem).find('#btn_send').click(sendInput);

                        v.triggerExecute('\\d');
                    })(jQuery);
                }
            };

            ko.bindingHandlers.init = {
                init: function (elem, va) {
                    var v = va();
                    (function ($) {
                        v($.ajax);
                    })(jQuery);
                }
            };

            var Result = function (command, sequence, height) {
                this.command = command;
                this.sequence = sequence;
                this.height = ko.observable(height || '');
                /* 0: pending, 1: success, 2: failure */
                this.status = ko.observable(0);
                this.canRefresh = ko.observable(true);
            };

            var Model = new function () {
                var self = this;
                var sequence = 0;
                var request = null;

                var sendCommand = function (command, _sequence) {
                    var result = null;
                    var mode = app.CREATE;

                    if (_sequence <= sequence) {
                        // result = self.resultBlock()[_sequence - 1];
                        var height = app.getHeight(_sequence);
                        result = new Result(command, _sequence, height + 'px');
                        self.resultBlock.splice(_sequence - 1, 1, result);
                        mode = app.EDIT;
                    } else {
                        result = new Result(command, _sequence);
                        self.resultBlock.push(result);
                    }

                    request({
                        url: '/query',
                        data: {
                            command: command
                        },
                        type: 'post'
                    }).then(function (response) {
                        /* success */
                        result.status(1);

                        if (response && response.msg)
                            app.success(response.msg, _sequence, mode);
                        else if (response && response.table && response.table.values.length !== 0) {
                            app.success(response.table, _sequence, mode)
                        } else
                            app.success('no result', mode);

                        if (command.substring(0, 2).trim() === '\\c') {
                            self.dbname(command.substring(2).trim());
                            result.canRefresh(false);
                        }


                    }, function (response) {
                        /* failure */
                        if (response.status === 406) {
                            result.status(2);
                            app.error(response.responseJSON.msg, _sequence, mode);
                        }
                    }).always(function () {
                    })

                };

                self.resultBlock = ko.observableArray([]);
                self.dbname = ko.observable('{{ dbname }}');

                self.init = function (_request) {
                    request = _request;
                };

                self.refresh = function (obj) {
                    sendCommand(obj.command, obj.sequence);
                };

                self.edit = function (sequence, obj) {
                };

                self.triggerExecute = function (command) {
                    var t = command.split(';');
                    for (var i = 0; i < t.length; i++) {
                        if (t[i].trim() === '')
                            continue;
                        sendCommand(t[i].trim(), sequence + 1);
                        sequence++;
                    }
                }
            }();

            ko.applyBindings(Model, document.getElementById('html'));
        })();
    </script>
{% endblock %}
